{"ast":null,"code":"var _jsxFileName = \"/Users/calebbelkin/cinespot/src/MovieComponent.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport './MovieComponent.css';\nimport Star from './assets/star.svg';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setColor, enableColorChange, disableColorChange, setLastClickedId } from './Redux/textSlice';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Movie({\n  id,\n  title,\n  image,\n  rating,\n  releaseDate\n}) {\n  _s();\n  const [isHovering, setIsHovering] = useState(false);\n  const [isClicked, setIsClicked] = useState(false);\n  const {\n    color,\n    canChangeColor,\n    lastClickedId\n  } = useSelector(state => state.textColor); // Destructure to access both state fields\n  const dispatch = useDispatch();\n  const trueRating = Math.round(rating * 10) / 10;\n  const year = releaseDate.slice(0, 4);\n  // const def = defaultImage\n\n  // console.log('line 13', isClicked)\n\n  // const handleMouseEnter = (e) => {\n  //   setIsHovering(true)\n  // // }\n  // console.log('23',lastClickedId)\n\n  // style={{ color: lastClickedId === id ? 'white' : 'black' }} title redux color test \n\n  const handleClick = () => {\n    if (canChangeColor) {\n      dispatch(setLastClickedId(id));\n      dispatch(disableColorChange());\n    } else {\n      dispatch(setLastClickedId(1));\n      dispatch(setLastClickedId(id));\n      dispatch(enableColorChange());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"poster\",\n      src: `https://image.tmdb.org/t/p/w500${image}`,\n      height: \"500px\",\n      width: \"350px\",\n      alt: \"Italian Trulli\",\n      onError: err => console.log('img error', err.target)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year-and-rating\",\n        children: [\" \", year, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"rating\",\n          children: [trueRating, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Movie, \"kNz7WA5R6e9mjDtS/AMbGhXzuro=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Movie;\nexport default Movie;\nvar _c;\n$RefreshReg$(_c, \"Movie\");","map":{"version":3,"names":["React","useState","Star","useSelector","useDispatch","setColor","enableColorChange","disableColorChange","setLastClickedId","Card","CardContent","jsxDEV","_jsxDEV","Movie","id","title","image","rating","releaseDate","_s","isHovering","setIsHovering","isClicked","setIsClicked","color","canChangeColor","lastClickedId","state","textColor","dispatch","trueRating","Math","round","year","slice","handleClick","children","src","height","width","alt","onError","err","console","log","target","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/calebbelkin/cinespot/src/MovieComponent.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport './MovieComponent.css'\nimport Star from './assets/star.svg'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setColor, enableColorChange, disableColorChange, setLastClickedId } from './Redux/textSlice';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n\nfunction Movie ( { id, title, image, rating, releaseDate} ) {\n  const [isHovering, setIsHovering] = useState(false)\n  const [isClicked, setIsClicked] = useState(false)\n  \n  const { color, canChangeColor, lastClickedId} = useSelector((state) => state.textColor); // Destructure to access both state fields\n  const dispatch = useDispatch();\n\n  const trueRating = Math.round(rating * 10) / 10\n  const year = releaseDate.slice(0, 4)\n  // const def = defaultImage\n\n  // console.log('line 13', isClicked)\n\n  // const handleMouseEnter = (e) => {\n  //   setIsHovering(true)\n  // // }\n  // console.log('23',lastClickedId)\n\n  // style={{ color: lastClickedId === id ? 'white' : 'black' }} title redux color test \n\n  const handleClick = () => {\n    if (canChangeColor) {\n      dispatch(setLastClickedId(id));\n      dispatch(disableColorChange());\n    }\n    else {\n      dispatch(setLastClickedId(1));\n      dispatch(setLastClickedId(id))\n      dispatch(enableColorChange())\n    }\n  };\n\n  return (\n    <div >\n      <img id='poster' src={`https://image.tmdb.org/t/p/w500${image}`} height='500px' width='350px' alt=\"Italian Trulli\" onError={(err) => console.log('img error', err.target)} />\n      {/* <div className='hover menu'>\n      </div> */}\n     <div>\n     <div className='year-and-rating'> {year}\n     <span className='rating'>{trueRating} </span>\n     {/* <button onClick={handleClick}>\n      Click Me\n     </button> */}\n      </div>\n      <div className='title' >\n      {title}</div>\n      </div> \n    </div> \n  );\n}\n\nexport default Movie;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}