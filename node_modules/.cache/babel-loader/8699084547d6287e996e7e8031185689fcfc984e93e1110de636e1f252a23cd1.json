{"ast":null,"code":"var _jsxFileName = \"/Users/calebbelkin/cinespot/src/MainPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './MainPage.css';\nimport { useEffect, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Movie from './MovieComponent';\nimport MovieGrid from './MovieGrid';\nimport Button from '@mui/material/Button';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainPage() {\n  _s();\n  const [currentSearch, setCurrentSearch] = useState('');\n  const [movieData, setMovieData] = useState([]);\n  const {\n    username\n  } = useSelector(state => state.User); // Destructure to access both state fields\n\n  const retriveSearch = async () => {\n    const QuereyParam = currentSearch;\n    console.log('line 13 RB', QuereyParam);\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${QuereyParam}&language=en-US&api_key=530e59adb476a9d4d8f46f031c75093e`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('line 21 data', data);\n      setMovieData(data.results);\n    } catch (error) {\n      console.log('Error posting data:', error);\n    }\n  };\n  const getData = () => {\n    fetch('http://localhost:4321/movielist').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json(); // Parses the body text as JSON\n    }).then(data => {\n      // console.log(data)\n      setMovieData(data.results);\n\n      // console.log('moviedata[0]', movieData[0].results[0].title)\n    }).catch(error => {\n      console.error('There was a problem with your fetch operation:', error);\n    });\n  };\n  // event handler for the onsubmit event\n  // when the form is submitted handleclick shoudld be called\n  const handleClick = e => {\n    // method is called on e,  to prevent the form from performing its default submit action, which is to reload the page.\n    e.preventDefault();\n    console.log(currentSearch);\n    retriveSearch();\n    setCurrentSearch('');\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  let navigate = useNavigate();\n  const handleLoginNav = () => {\n    navigate('/login');\n  };\n  console.log('line62', movieData);\n  const movieDetails = movieData.map(movie => {\n    if (movie.poster_path == null) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(Movie, {\n      id: movie.id,\n      title: movie.title,\n      releaseDate: movie.release_date,\n      image: movie.poster_path,\n      rating: movie.vote_average,\n      overview: movie.overview\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleClick,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-bar\",\n          name: \"search\",\n          value: currentSearch,\n          placeholder: \"Seach Movies\",\n          onChange: e => setCurrentSearch(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"\",\n          placeholder: \"\",\n          className: \"submit-btn\",\n          onClick: console.log('clicked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"login\",\n        variant: \"outlined\",\n        onClick: handleLoginNav,\n        children: [\"  \", username === '' ? \"Login\" : username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backdrop\",\n      children: /*#__PURE__*/_jsxDEV(MovieGrid, {\n        movieDetails: movieDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 7\n  }, this);\n}\n_s(MainPage, \"EScHH92B9GIiUOMVqGcOTym02vA=\", false, function () {\n  return [useSelector, useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\n\n// style={{ color: lastClickedId === id ? 'white' : 'black' }} title redux color test \n\n// onChange defined an event handler for the input field, it is called eveytime somethin is typed in the input field \n// e (on change) is the event object\n// e (handle click) represents the event object for the on submit event \n//handler function: a function designed to respond to specific events or actions \n// \nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useEffect","useState","useContext","useNavigate","Movie","MovieGrid","Button","useSelector","jsxDEV","_jsxDEV","MainPage","_s","currentSearch","setCurrentSearch","movieData","setMovieData","username","state","User","retriveSearch","QuereyParam","console","log","response","fetch","ok","Error","status","data","json","results","error","getData","then","catch","handleClick","e","preventDefault","navigate","handleLoginNav","movieDetails","map","movie","poster_path","id","title","releaseDate","release_date","image","rating","vote_average","overview","fileName","_jsxFileName","lineNumber","columnNumber","children","className","onSubmit","type","name","value","placeholder","onChange","target","onClick","variant","_c","$RefreshReg$"],"sources":["/Users/calebbelkin/cinespot/src/MainPage.js"],"sourcesContent":["import React from 'react';\nimport './MainPage.css'\nimport { useEffect, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Movie from './MovieComponent';\nimport MovieGrid from './MovieGrid';\nimport Button from '@mui/material/Button';\nimport { useSelector } from 'react-redux';\n\n\n\n\n\nfunction MainPage() {\n    const [currentSearch, setCurrentSearch] = useState('');\n    const [movieData , setMovieData] = useState([])\n\n      const { username } = useSelector((state) => state.User); // Destructure to access both state fields\n\n\n    const retriveSearch = async () => {\n      const QuereyParam = currentSearch;\n      console.log('line 13 RB', QuereyParam)\n      try {\n        const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${QuereyParam}&language=en-US&api_key=530e59adb476a9d4d8f46f031c75093e`)\n\nif (!response.ok) {\n  throw new Error(`HTTP error! Status: ${response.status}`);\n}\n\nconst data = await response.json();\nconsole.log('line 21 data', data);\nsetMovieData(data.results);\n      } catch (error) {\n        console.log('Error posting data:', error);\n      }\n    }\n\n    const getData = () => {\n        fetch('http://localhost:4321/movielist')\n        \n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();  // Parses the body text as JSON\n        })\n        .then(data => {\n          // console.log(data)\n          setMovieData(data.results)\n     \n          // console.log('moviedata[0]', movieData[0].results[0].title)\n        })\n        .catch(error => {\n          console.error('There was a problem with your fetch operation:', error);\n        });\n    }\n    // event handler for the onsubmit event\n    // when the form is submitted handleclick shoudld be called\n    const handleClick = (e) => {\n        // method is called on e,  to prevent the form from performing its default submit action, which is to reload the page.\n        e.preventDefault();\n        console.log(currentSearch)\n        retriveSearch();  \n        setCurrentSearch('')\n    }\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n\n\n    let navigate = useNavigate();\n\n\n  const handleLoginNav = () => {\n    navigate('/login')\n  }\n\n\n  console.log('line62', movieData)\n  const movieDetails = movieData.map(movie => {\n    if (movie.poster_path == null) {return null \n    }\n    return (\n      <Movie key={movie.id} id={movie.id} title={movie.title} releaseDate={movie.release_date} image={movie.poster_path} rating={movie.vote_average} overview={movie.overview} />\n    )\n});\n\n    return (\n      <div > \n        <header className='header'>\n          <form className='form' onSubmit={handleClick}> \n            <input type=\"text\" className=\"search-bar\" name=\"search\" value={currentSearch} placeholder='Seach Movies' onChange={(e) => setCurrentSearch(e.target.value)}/>\n            <input type=\"submit\" value=\"\" placeholder='' className='submit-btn' onClick={console.log('clicked')}/>\n          </form> \n          <Button className='login' variant=\"outlined\" onClick={handleLoginNav}>  {username === '' ? \"Login\" : username}</Button>;\n          </header>\n        <div className='backdrop'>\n          <MovieGrid movieDetails={movieDetails}/>\n        </div>\n      </div>\n    );\n  }\n\nexport default MainPage;\n\n  // style={{ color: lastClickedId === id ? 'white' : 'black' }} title redux color test \n\n\n// onChange defined an event handler for the input field, it is called eveytime somethin is typed in the input field \n// e (on change) is the event object\n// e (handle click) represents the event object for the on submit event \n//handler function: a function designed to respond to specific events or actions \n// "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}